name: Deploy

on:
    push:
        branches: [main]
        paths-ignore:
            - "**.md"
            - ".github/workflows/ci.yaml"
    workflow_dispatch:
        inputs:
            environment:
                description: "Environment to deploy to"
                required: true
                default: "dev"
                type: choice
                options:
                    - dev

env:
    AWS_REGION: eu-central-1
    ECR_REPOSITORY: drive/api
    ECS_CLUSTER: drive-dev
    ECS_SERVICE: drive-api

jobs:
    version:
        runs-on: ubuntu-latest
        outputs:
            semVer: ${{ steps.gitversion.outputs.semVer }}
            shortSha: ${{ steps.gitversion.outputs.shortSha }}

        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Install GitVersion
              uses: gittools/actions/gitversion/setup@v0
              with:
                  versionSpec: "5.x"

            - name: Determine Version
              id: gitversion
              uses: gittools/actions/gitversion/execute@v0
              with:
                  useConfigFile: true

            - name: Display version
              run: |
                  echo "Version: ${{ steps.gitversion.outputs.semVer }}"
                  echo "Short SHA: ${{ steps.gitversion.outputs.shortSha }}"

    build-and-push:
        needs: version
        runs-on: ubuntu-latest
        outputs:
            image-tag: ${{ needs.version.outputs.semVer }}
            image-url: ${{ steps.build.outputs.image }}

        steps:
            - uses: actions/checkout@v4

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2

            - name: Build, tag, and push image to Amazon ECR
              id: build
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  VERSION: ${{ needs.version.outputs.semVer }}
                  SHORT_SHA: ${{ needs.version.outputs.shortSha }}
              run: |
                  # Build with version build arg
                  docker build \
                    --build-arg VERSION=$VERSION \
                    --tag $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION \
                    --tag $ECR_REGISTRY/$ECR_REPOSITORY:latest \
                    --file Dockerfile \
                    .

                  # Push both tags
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

                  echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$VERSION" >> $GITHUB_OUTPUT

            - name: Create Git Tag
              if: github.ref == 'refs/heads/main'
              run: |
                  git config user.name "GitHub Actions"
                  git config user.email "actions@github.com"
                  git tag -a "v${{ needs.version.outputs.semVer }}" -m "Release version ${{ needs.version.outputs.semVer }}"
                  git push origin "v${{ needs.version.outputs.semVer }}"

    deploy-infrastructure:
        needs: [version, build-and-push]
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: deploy/infrastructure

        steps:
            - uses: actions/checkout@v4

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v3
              with:
                  terraform_version: 1.11.0

            - name: Terraform Init
              working-directory: deploy/infrastructure/dev
              run: terraform init

            - name: Terraform Plan
              working-directory: deploy/infrastructure/dev
              run: terraform plan -var="image_tag=${{ needs.version.outputs.semVer }}" -no-color
              continue-on-error: true

            - name: Terraform Apply
              working-directory: deploy/infrastructure/dev
              run: terraform apply -var="image_tag=${{ needs.version.outputs.semVer }}" -auto-approve -no-color

    deploy-application:
        needs: [version, build-and-push, deploy-infrastructure]
        runs-on: ubuntu-latest

        steps:
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Force new deployment
              run: |
                  aws ecs update-service \
                    --cluster ${{ env.ECS_CLUSTER }} \
                    --service ${{ env.ECS_SERVICE }} \
                    --force-new-deployment \
                    --no-cli-pager

            - name: Wait for service to be stable
              run: |
                  aws ecs wait services-stable \
                    --cluster ${{ env.ECS_CLUSTER }} \
                    --services ${{ env.ECS_SERVICE }} \
                    --no-cli-pager
